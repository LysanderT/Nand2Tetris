// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    
/**
    0~2^14-1: RAM (16K)
    2^14~2^14+2^13-1: Screen (8K)
    2^14+2^13: Keyboard (1)

    if address[14] == 0: RAM (16K);
    else if address[13] == 0: Screen (8K);
    else: Keyboard (1);
**/

/** 
* sel = {address[14],address[13]}
* {a, b, c, d} = {in, 0, 0, 0} if sel == 00
*                {0, in, 0, 0} if sel == 01
*                {0, 0, in, 0} if sel == 10
*                {0, 0, 0, in} if sel == 11
*/

    DMux4Way(in=load, sel=address[13..14], a=ld1, b=ld2, c=ld3, d=ld4);
    Or(a=ld1, b=ld2, out=ld0);
    //And16(a[0..14]=address, a[15]=false, b=true, out=address16);
    RAM16K(in=in, load=ld0, address=address[0..13], out=out0);
    Screen(in=in, load=ld3, address=address[0..12], out=out1);
    Keyboard(out=out2);
    Mux4Way16(a=out0, b=out0, c=out1, d=out2, sel=address[13..14], out=out);

}